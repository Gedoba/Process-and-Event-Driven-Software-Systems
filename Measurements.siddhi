@App:name('Measurements')
@App:description('Receive CGM measurements and its timestamp')

-- @sink(type='log')
@source(type = 'http', receiver.url = "http://localhost:8089/cgmMeasurements",
	@map(type = 'json',
		@attributes(time = "$.time", value = "$.value")))
define stream PythonInput (value int, time int);

-- @sink(type = 'log')
@sink(type = 'http', publisher.url = "http://localhost:8080/engine-rest/message",
	@map(type = 'json',
		@payload("""{
					  "messageName": "{{messageName}}",

					  "processVariables": {
					      "{{variableName}}": {
					          "value": {{value}},
					          "type": "integer"
					      },
    			        "time": {
    			            "value": {{timeToCamunda}},
    			            "type":"integer"
    			        }
						  }
						}""")))
define stream MessageStartStream (messageName string, value int, variableName string, timeToCamunda int);

@sink(type = 'log')
@sink(type = 'http', publisher.url = "http://localhost:8080/engine-rest/process-instance/message-async",
	@map(type = 'json',
		@payload("""{
          "messageName": "{{messageName}}",
          "processInstanceIds": [
            "{{processId}}"
          ],
          "variables": {
            "{{variableName}}": {
              "value": "{{value}}"
            }
          }
        }""")))
define stream MessageIntermediateStream (messageName string, value string, variableName string, processId string);

@source(type = 'http', receiver.url = "http://localhost:8081/haveLevelsImproved",
@map(type = 'json'))
@sink(type = 'log')
define stream QueriesIfLevelsImprovedStream (processId string);

define stream Time (time string);

@source(type = 'http', receiver.url = "http://localhost:8081/bloodSugarLevels",
	@map(type = 'json'))

@sink(type = 'log')
define stream CamundaBloodSugarLevelsInput (value int, time int);

@info(name = 'query1')
from PythonInput 
select 'Blood sugar levels' as messageName, value, 'bloodSugarLevelsValue' as variableName, time as timeToCamunda
insert into MessageStartStream;


--pattern recognition
@sink(type = 'log')
@info(name='pattern recognition') 
from
every(e1 = CamundaBloodSugarLevelsInput) ->
every(e2 = CamundaBloodSugarLevelsInput [ ((time - e1.time) == 500 or (time - e1.time) == 4500)]) ->
every(e3 = CamundaBloodSugarLevelsInput [ ((time - e2.time) == 500 or (time - e2.time) == 4500)]) ->
every(e4 = CamundaBloodSugarLevelsInput [ ((time - e3.time) == 500 or (time - e3.time) == 4500)]) ->
every(e5 = CamundaBloodSugarLevelsInput [ ((time - e4.time) == 500 or (time - e4.time) == 4500)]) ->
every(e6 = CamundaBloodSugarLevelsInput [ ((time - e5.time) == 500 or (time - e5.time) == 4500)]) ->
e7 = CamundaBloodSugarLevelsInput [(e1.value < value - 1000 or e1.value > value + 1000)]
select'Dangerous blood sugar levels' as messageName, e7.value as value, 'bloodSugarLevelsValue' as variableName, e7.time as timeToCamunda
insert into MessageStartStream;


@info(name='pattern recognition2') 
from
    e1 = QueriesIfLevelsImprovedStream [not(processId is null)] ->
    not CamundaBloodSugarLevelsInput [value > 3500 and value < 6000] for 1 min
select 'Indication that blood sugar levels improved' as messageName, 'Improved' as value, 'indication' as variableName, e1.processId
insert into MessageIntermediateStream;
